
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model user_login_info
 * 
 */
export type user_login_info = $Result.DefaultSelection<Prisma.$user_login_infoPayload>
/**
 * Model doctor_info
 * 
 */
export type doctor_info = $Result.DefaultSelection<Prisma.$doctor_infoPayload>
/**
 * Model receptionist_info
 * 
 */
export type receptionist_info = $Result.DefaultSelection<Prisma.$receptionist_infoPayload>
/**
 * Model intern_info
 * 
 */
export type intern_info = $Result.DefaultSelection<Prisma.$intern_infoPayload>
/**
 * Model patient_basic_info
 * 
 */
export type patient_basic_info = $Result.DefaultSelection<Prisma.$patient_basic_infoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more User_login_infos
 * const user_login_infos = await prisma.user_login_info.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more User_login_infos
   * const user_login_infos = await prisma.user_login_info.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user_login_info`: Exposes CRUD operations for the **user_login_info** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_login_infos
    * const user_login_infos = await prisma.user_login_info.findMany()
    * ```
    */
  get user_login_info(): Prisma.user_login_infoDelegate<ExtArgs>;

  /**
   * `prisma.doctor_info`: Exposes CRUD operations for the **doctor_info** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctor_infos
    * const doctor_infos = await prisma.doctor_info.findMany()
    * ```
    */
  get doctor_info(): Prisma.doctor_infoDelegate<ExtArgs>;

  /**
   * `prisma.receptionist_info`: Exposes CRUD operations for the **receptionist_info** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Receptionist_infos
    * const receptionist_infos = await prisma.receptionist_info.findMany()
    * ```
    */
  get receptionist_info(): Prisma.receptionist_infoDelegate<ExtArgs>;

  /**
   * `prisma.intern_info`: Exposes CRUD operations for the **intern_info** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Intern_infos
    * const intern_infos = await prisma.intern_info.findMany()
    * ```
    */
  get intern_info(): Prisma.intern_infoDelegate<ExtArgs>;

  /**
   * `prisma.patient_basic_info`: Exposes CRUD operations for the **patient_basic_info** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patient_basic_infos
    * const patient_basic_infos = await prisma.patient_basic_info.findMany()
    * ```
    */
  get patient_basic_info(): Prisma.patient_basic_infoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.1.1
   * Query Engine version: 6a3747c37ff169c90047725a05a6ef02e32ac97e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    user_login_info: 'user_login_info',
    doctor_info: 'doctor_info',
    receptionist_info: 'receptionist_info',
    intern_info: 'intern_info',
    patient_basic_info: 'patient_basic_info'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user_login_info' | 'doctor_info' | 'receptionist_info' | 'intern_info' | 'patient_basic_info'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      user_login_info: {
        payload: Prisma.$user_login_infoPayload<ExtArgs>
        fields: Prisma.user_login_infoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_login_infoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_login_infoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_login_infoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_login_infoPayload>
          }
          findFirst: {
            args: Prisma.user_login_infoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_login_infoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_login_infoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_login_infoPayload>
          }
          findMany: {
            args: Prisma.user_login_infoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_login_infoPayload>[]
          }
          create: {
            args: Prisma.user_login_infoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_login_infoPayload>
          }
          createMany: {
            args: Prisma.user_login_infoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.user_login_infoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_login_infoPayload>
          }
          update: {
            args: Prisma.user_login_infoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_login_infoPayload>
          }
          deleteMany: {
            args: Prisma.user_login_infoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.user_login_infoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.user_login_infoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_login_infoPayload>
          }
          aggregate: {
            args: Prisma.User_login_infoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser_login_info>
          }
          groupBy: {
            args: Prisma.user_login_infoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<User_login_infoGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_login_infoCountArgs<ExtArgs>,
            result: $Utils.Optional<User_login_infoCountAggregateOutputType> | number
          }
        }
      }
      doctor_info: {
        payload: Prisma.$doctor_infoPayload<ExtArgs>
        fields: Prisma.doctor_infoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.doctor_infoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doctor_infoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.doctor_infoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doctor_infoPayload>
          }
          findFirst: {
            args: Prisma.doctor_infoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doctor_infoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.doctor_infoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doctor_infoPayload>
          }
          findMany: {
            args: Prisma.doctor_infoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doctor_infoPayload>[]
          }
          create: {
            args: Prisma.doctor_infoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doctor_infoPayload>
          }
          createMany: {
            args: Prisma.doctor_infoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.doctor_infoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doctor_infoPayload>
          }
          update: {
            args: Prisma.doctor_infoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doctor_infoPayload>
          }
          deleteMany: {
            args: Prisma.doctor_infoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.doctor_infoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.doctor_infoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doctor_infoPayload>
          }
          aggregate: {
            args: Prisma.Doctor_infoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDoctor_info>
          }
          groupBy: {
            args: Prisma.doctor_infoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Doctor_infoGroupByOutputType>[]
          }
          count: {
            args: Prisma.doctor_infoCountArgs<ExtArgs>,
            result: $Utils.Optional<Doctor_infoCountAggregateOutputType> | number
          }
        }
      }
      receptionist_info: {
        payload: Prisma.$receptionist_infoPayload<ExtArgs>
        fields: Prisma.receptionist_infoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.receptionist_infoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$receptionist_infoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.receptionist_infoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$receptionist_infoPayload>
          }
          findFirst: {
            args: Prisma.receptionist_infoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$receptionist_infoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.receptionist_infoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$receptionist_infoPayload>
          }
          findMany: {
            args: Prisma.receptionist_infoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$receptionist_infoPayload>[]
          }
          create: {
            args: Prisma.receptionist_infoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$receptionist_infoPayload>
          }
          createMany: {
            args: Prisma.receptionist_infoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.receptionist_infoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$receptionist_infoPayload>
          }
          update: {
            args: Prisma.receptionist_infoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$receptionist_infoPayload>
          }
          deleteMany: {
            args: Prisma.receptionist_infoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.receptionist_infoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.receptionist_infoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$receptionist_infoPayload>
          }
          aggregate: {
            args: Prisma.Receptionist_infoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReceptionist_info>
          }
          groupBy: {
            args: Prisma.receptionist_infoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Receptionist_infoGroupByOutputType>[]
          }
          count: {
            args: Prisma.receptionist_infoCountArgs<ExtArgs>,
            result: $Utils.Optional<Receptionist_infoCountAggregateOutputType> | number
          }
        }
      }
      intern_info: {
        payload: Prisma.$intern_infoPayload<ExtArgs>
        fields: Prisma.intern_infoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.intern_infoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$intern_infoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.intern_infoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$intern_infoPayload>
          }
          findFirst: {
            args: Prisma.intern_infoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$intern_infoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.intern_infoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$intern_infoPayload>
          }
          findMany: {
            args: Prisma.intern_infoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$intern_infoPayload>[]
          }
          create: {
            args: Prisma.intern_infoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$intern_infoPayload>
          }
          createMany: {
            args: Prisma.intern_infoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.intern_infoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$intern_infoPayload>
          }
          update: {
            args: Prisma.intern_infoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$intern_infoPayload>
          }
          deleteMany: {
            args: Prisma.intern_infoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.intern_infoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.intern_infoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$intern_infoPayload>
          }
          aggregate: {
            args: Prisma.Intern_infoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateIntern_info>
          }
          groupBy: {
            args: Prisma.intern_infoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Intern_infoGroupByOutputType>[]
          }
          count: {
            args: Prisma.intern_infoCountArgs<ExtArgs>,
            result: $Utils.Optional<Intern_infoCountAggregateOutputType> | number
          }
        }
      }
      patient_basic_info: {
        payload: Prisma.$patient_basic_infoPayload<ExtArgs>
        fields: Prisma.patient_basic_infoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.patient_basic_infoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$patient_basic_infoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.patient_basic_infoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$patient_basic_infoPayload>
          }
          findFirst: {
            args: Prisma.patient_basic_infoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$patient_basic_infoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.patient_basic_infoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$patient_basic_infoPayload>
          }
          findMany: {
            args: Prisma.patient_basic_infoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$patient_basic_infoPayload>[]
          }
          create: {
            args: Prisma.patient_basic_infoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$patient_basic_infoPayload>
          }
          createMany: {
            args: Prisma.patient_basic_infoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.patient_basic_infoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$patient_basic_infoPayload>
          }
          update: {
            args: Prisma.patient_basic_infoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$patient_basic_infoPayload>
          }
          deleteMany: {
            args: Prisma.patient_basic_infoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.patient_basic_infoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.patient_basic_infoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$patient_basic_infoPayload>
          }
          aggregate: {
            args: Prisma.Patient_basic_infoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePatient_basic_info>
          }
          groupBy: {
            args: Prisma.patient_basic_infoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Patient_basic_infoGroupByOutputType>[]
          }
          count: {
            args: Prisma.patient_basic_infoCountArgs<ExtArgs>,
            result: $Utils.Optional<Patient_basic_infoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model user_login_info
   */

  export type AggregateUser_login_info = {
    _count: User_login_infoCountAggregateOutputType | null
    _min: User_login_infoMinAggregateOutputType | null
    _max: User_login_infoMaxAggregateOutputType | null
  }

  export type User_login_infoMinAggregateOutputType = {
    username: string | null
    hash_password: string | null
    user_role: string | null
  }

  export type User_login_infoMaxAggregateOutputType = {
    username: string | null
    hash_password: string | null
    user_role: string | null
  }

  export type User_login_infoCountAggregateOutputType = {
    username: number
    hash_password: number
    user_role: number
    _all: number
  }


  export type User_login_infoMinAggregateInputType = {
    username?: true
    hash_password?: true
    user_role?: true
  }

  export type User_login_infoMaxAggregateInputType = {
    username?: true
    hash_password?: true
    user_role?: true
  }

  export type User_login_infoCountAggregateInputType = {
    username?: true
    hash_password?: true
    user_role?: true
    _all?: true
  }

  export type User_login_infoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_login_info to aggregate.
     */
    where?: user_login_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_login_infos to fetch.
     */
    orderBy?: user_login_infoOrderByWithRelationInput | user_login_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_login_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_login_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_login_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_login_infos
    **/
    _count?: true | User_login_infoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_login_infoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_login_infoMaxAggregateInputType
  }

  export type GetUser_login_infoAggregateType<T extends User_login_infoAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_login_info]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_login_info[P]>
      : GetScalarType<T[P], AggregateUser_login_info[P]>
  }




  export type user_login_infoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: user_login_infoWhereInput
    orderBy?: user_login_infoOrderByWithAggregationInput | user_login_infoOrderByWithAggregationInput[]
    by: User_login_infoScalarFieldEnum[] | User_login_infoScalarFieldEnum
    having?: user_login_infoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_login_infoCountAggregateInputType | true
    _min?: User_login_infoMinAggregateInputType
    _max?: User_login_infoMaxAggregateInputType
  }

  export type User_login_infoGroupByOutputType = {
    username: string
    hash_password: string
    user_role: string
    _count: User_login_infoCountAggregateOutputType | null
    _min: User_login_infoMinAggregateOutputType | null
    _max: User_login_infoMaxAggregateOutputType | null
  }

  type GetUser_login_infoGroupByPayload<T extends user_login_infoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_login_infoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_login_infoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_login_infoGroupByOutputType[P]>
            : GetScalarType<T[P], User_login_infoGroupByOutputType[P]>
        }
      >
    >


  export type user_login_infoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    username?: boolean
    hash_password?: boolean
    user_role?: boolean
  }, ExtArgs["result"]["user_login_info"]>

  export type user_login_infoSelectScalar = {
    username?: boolean
    hash_password?: boolean
    user_role?: boolean
  }


  export type $user_login_infoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "user_login_info"
    objects: {}
    scalars: $Extensions.GetResult<{
      username: string
      hash_password: string
      user_role: string
    }, ExtArgs["result"]["user_login_info"]>
    composites: {}
  }


  type user_login_infoGetPayload<S extends boolean | null | undefined | user_login_infoDefaultArgs> = $Result.GetResult<Prisma.$user_login_infoPayload, S>

  type user_login_infoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<user_login_infoFindManyArgs, 'select' | 'include'> & {
      select?: User_login_infoCountAggregateInputType | true
    }

  export interface user_login_infoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_login_info'], meta: { name: 'user_login_info' } }
    /**
     * Find zero or one User_login_info that matches the filter.
     * @param {user_login_infoFindUniqueArgs} args - Arguments to find a User_login_info
     * @example
     * // Get one User_login_info
     * const user_login_info = await prisma.user_login_info.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_login_infoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, user_login_infoFindUniqueArgs<ExtArgs>>
    ): Prisma__user_login_infoClient<$Result.GetResult<Prisma.$user_login_infoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User_login_info that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {user_login_infoFindUniqueOrThrowArgs} args - Arguments to find a User_login_info
     * @example
     * // Get one User_login_info
     * const user_login_info = await prisma.user_login_info.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends user_login_infoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, user_login_infoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__user_login_infoClient<$Result.GetResult<Prisma.$user_login_infoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User_login_info that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_login_infoFindFirstArgs} args - Arguments to find a User_login_info
     * @example
     * // Get one User_login_info
     * const user_login_info = await prisma.user_login_info.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_login_infoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, user_login_infoFindFirstArgs<ExtArgs>>
    ): Prisma__user_login_infoClient<$Result.GetResult<Prisma.$user_login_infoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User_login_info that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_login_infoFindFirstOrThrowArgs} args - Arguments to find a User_login_info
     * @example
     * // Get one User_login_info
     * const user_login_info = await prisma.user_login_info.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends user_login_infoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, user_login_infoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__user_login_infoClient<$Result.GetResult<Prisma.$user_login_infoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more User_login_infos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_login_infoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_login_infos
     * const user_login_infos = await prisma.user_login_info.findMany()
     * 
     * // Get first 10 User_login_infos
     * const user_login_infos = await prisma.user_login_info.findMany({ take: 10 })
     * 
     * // Only select the `username`
     * const user_login_infoWithUsernameOnly = await prisma.user_login_info.findMany({ select: { username: true } })
     * 
    **/
    findMany<T extends user_login_infoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_login_infoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_login_infoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User_login_info.
     * @param {user_login_infoCreateArgs} args - Arguments to create a User_login_info.
     * @example
     * // Create one User_login_info
     * const User_login_info = await prisma.user_login_info.create({
     *   data: {
     *     // ... data to create a User_login_info
     *   }
     * })
     * 
    **/
    create<T extends user_login_infoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, user_login_infoCreateArgs<ExtArgs>>
    ): Prisma__user_login_infoClient<$Result.GetResult<Prisma.$user_login_infoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many User_login_infos.
     *     @param {user_login_infoCreateManyArgs} args - Arguments to create many User_login_infos.
     *     @example
     *     // Create many User_login_infos
     *     const user_login_info = await prisma.user_login_info.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends user_login_infoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_login_infoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User_login_info.
     * @param {user_login_infoDeleteArgs} args - Arguments to delete one User_login_info.
     * @example
     * // Delete one User_login_info
     * const User_login_info = await prisma.user_login_info.delete({
     *   where: {
     *     // ... filter to delete one User_login_info
     *   }
     * })
     * 
    **/
    delete<T extends user_login_infoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, user_login_infoDeleteArgs<ExtArgs>>
    ): Prisma__user_login_infoClient<$Result.GetResult<Prisma.$user_login_infoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User_login_info.
     * @param {user_login_infoUpdateArgs} args - Arguments to update one User_login_info.
     * @example
     * // Update one User_login_info
     * const user_login_info = await prisma.user_login_info.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_login_infoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, user_login_infoUpdateArgs<ExtArgs>>
    ): Prisma__user_login_infoClient<$Result.GetResult<Prisma.$user_login_infoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more User_login_infos.
     * @param {user_login_infoDeleteManyArgs} args - Arguments to filter User_login_infos to delete.
     * @example
     * // Delete a few User_login_infos
     * const { count } = await prisma.user_login_info.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_login_infoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_login_infoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_login_infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_login_infoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_login_infos
     * const user_login_info = await prisma.user_login_info.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_login_infoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, user_login_infoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_login_info.
     * @param {user_login_infoUpsertArgs} args - Arguments to update or create a User_login_info.
     * @example
     * // Update or create a User_login_info
     * const user_login_info = await prisma.user_login_info.upsert({
     *   create: {
     *     // ... data to create a User_login_info
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_login_info we want to update
     *   }
     * })
    **/
    upsert<T extends user_login_infoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, user_login_infoUpsertArgs<ExtArgs>>
    ): Prisma__user_login_infoClient<$Result.GetResult<Prisma.$user_login_infoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of User_login_infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_login_infoCountArgs} args - Arguments to filter User_login_infos to count.
     * @example
     * // Count the number of User_login_infos
     * const count = await prisma.user_login_info.count({
     *   where: {
     *     // ... the filter for the User_login_infos we want to count
     *   }
     * })
    **/
    count<T extends user_login_infoCountArgs>(
      args?: Subset<T, user_login_infoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_login_infoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_login_info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_login_infoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_login_infoAggregateArgs>(args: Subset<T, User_login_infoAggregateArgs>): Prisma.PrismaPromise<GetUser_login_infoAggregateType<T>>

    /**
     * Group by User_login_info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_login_infoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_login_infoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_login_infoGroupByArgs['orderBy'] }
        : { orderBy?: user_login_infoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_login_infoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_login_infoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_login_info model
   */
  readonly fields: user_login_infoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_login_info.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_login_infoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the user_login_info model
   */ 
  interface user_login_infoFieldRefs {
    readonly username: FieldRef<"user_login_info", 'String'>
    readonly hash_password: FieldRef<"user_login_info", 'String'>
    readonly user_role: FieldRef<"user_login_info", 'String'>
  }
    

  // Custom InputTypes

  /**
   * user_login_info findUnique
   */
  export type user_login_infoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_login_info
     */
    select?: user_login_infoSelect<ExtArgs> | null
    /**
     * Filter, which user_login_info to fetch.
     */
    where: user_login_infoWhereUniqueInput
  }


  /**
   * user_login_info findUniqueOrThrow
   */
  export type user_login_infoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_login_info
     */
    select?: user_login_infoSelect<ExtArgs> | null
    /**
     * Filter, which user_login_info to fetch.
     */
    where: user_login_infoWhereUniqueInput
  }


  /**
   * user_login_info findFirst
   */
  export type user_login_infoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_login_info
     */
    select?: user_login_infoSelect<ExtArgs> | null
    /**
     * Filter, which user_login_info to fetch.
     */
    where?: user_login_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_login_infos to fetch.
     */
    orderBy?: user_login_infoOrderByWithRelationInput | user_login_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_login_infos.
     */
    cursor?: user_login_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_login_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_login_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_login_infos.
     */
    distinct?: User_login_infoScalarFieldEnum | User_login_infoScalarFieldEnum[]
  }


  /**
   * user_login_info findFirstOrThrow
   */
  export type user_login_infoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_login_info
     */
    select?: user_login_infoSelect<ExtArgs> | null
    /**
     * Filter, which user_login_info to fetch.
     */
    where?: user_login_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_login_infos to fetch.
     */
    orderBy?: user_login_infoOrderByWithRelationInput | user_login_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_login_infos.
     */
    cursor?: user_login_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_login_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_login_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_login_infos.
     */
    distinct?: User_login_infoScalarFieldEnum | User_login_infoScalarFieldEnum[]
  }


  /**
   * user_login_info findMany
   */
  export type user_login_infoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_login_info
     */
    select?: user_login_infoSelect<ExtArgs> | null
    /**
     * Filter, which user_login_infos to fetch.
     */
    where?: user_login_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_login_infos to fetch.
     */
    orderBy?: user_login_infoOrderByWithRelationInput | user_login_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_login_infos.
     */
    cursor?: user_login_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_login_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_login_infos.
     */
    skip?: number
    distinct?: User_login_infoScalarFieldEnum | User_login_infoScalarFieldEnum[]
  }


  /**
   * user_login_info create
   */
  export type user_login_infoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_login_info
     */
    select?: user_login_infoSelect<ExtArgs> | null
    /**
     * The data needed to create a user_login_info.
     */
    data: XOR<user_login_infoCreateInput, user_login_infoUncheckedCreateInput>
  }


  /**
   * user_login_info createMany
   */
  export type user_login_infoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_login_infos.
     */
    data: user_login_infoCreateManyInput | user_login_infoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * user_login_info update
   */
  export type user_login_infoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_login_info
     */
    select?: user_login_infoSelect<ExtArgs> | null
    /**
     * The data needed to update a user_login_info.
     */
    data: XOR<user_login_infoUpdateInput, user_login_infoUncheckedUpdateInput>
    /**
     * Choose, which user_login_info to update.
     */
    where: user_login_infoWhereUniqueInput
  }


  /**
   * user_login_info updateMany
   */
  export type user_login_infoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_login_infos.
     */
    data: XOR<user_login_infoUpdateManyMutationInput, user_login_infoUncheckedUpdateManyInput>
    /**
     * Filter which user_login_infos to update
     */
    where?: user_login_infoWhereInput
  }


  /**
   * user_login_info upsert
   */
  export type user_login_infoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_login_info
     */
    select?: user_login_infoSelect<ExtArgs> | null
    /**
     * The filter to search for the user_login_info to update in case it exists.
     */
    where: user_login_infoWhereUniqueInput
    /**
     * In case the user_login_info found by the `where` argument doesn't exist, create a new user_login_info with this data.
     */
    create: XOR<user_login_infoCreateInput, user_login_infoUncheckedCreateInput>
    /**
     * In case the user_login_info was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_login_infoUpdateInput, user_login_infoUncheckedUpdateInput>
  }


  /**
   * user_login_info delete
   */
  export type user_login_infoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_login_info
     */
    select?: user_login_infoSelect<ExtArgs> | null
    /**
     * Filter which user_login_info to delete.
     */
    where: user_login_infoWhereUniqueInput
  }


  /**
   * user_login_info deleteMany
   */
  export type user_login_infoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_login_infos to delete
     */
    where?: user_login_infoWhereInput
  }


  /**
   * user_login_info without action
   */
  export type user_login_infoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_login_info
     */
    select?: user_login_infoSelect<ExtArgs> | null
  }



  /**
   * Model doctor_info
   */

  export type AggregateDoctor_info = {
    _count: Doctor_infoCountAggregateOutputType | null
    _min: Doctor_infoMinAggregateOutputType | null
    _max: Doctor_infoMaxAggregateOutputType | null
  }

  export type Doctor_infoMinAggregateOutputType = {
    username: string | null
    name: string | null
    specialization: string | null
    degree: string | null
    phone: string | null
    email: string | null
  }

  export type Doctor_infoMaxAggregateOutputType = {
    username: string | null
    name: string | null
    specialization: string | null
    degree: string | null
    phone: string | null
    email: string | null
  }

  export type Doctor_infoCountAggregateOutputType = {
    username: number
    name: number
    specialization: number
    degree: number
    phone: number
    email: number
    _all: number
  }


  export type Doctor_infoMinAggregateInputType = {
    username?: true
    name?: true
    specialization?: true
    degree?: true
    phone?: true
    email?: true
  }

  export type Doctor_infoMaxAggregateInputType = {
    username?: true
    name?: true
    specialization?: true
    degree?: true
    phone?: true
    email?: true
  }

  export type Doctor_infoCountAggregateInputType = {
    username?: true
    name?: true
    specialization?: true
    degree?: true
    phone?: true
    email?: true
    _all?: true
  }

  export type Doctor_infoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which doctor_info to aggregate.
     */
    where?: doctor_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctor_infos to fetch.
     */
    orderBy?: doctor_infoOrderByWithRelationInput | doctor_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: doctor_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctor_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctor_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned doctor_infos
    **/
    _count?: true | Doctor_infoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Doctor_infoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Doctor_infoMaxAggregateInputType
  }

  export type GetDoctor_infoAggregateType<T extends Doctor_infoAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctor_info]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctor_info[P]>
      : GetScalarType<T[P], AggregateDoctor_info[P]>
  }




  export type doctor_infoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: doctor_infoWhereInput
    orderBy?: doctor_infoOrderByWithAggregationInput | doctor_infoOrderByWithAggregationInput[]
    by: Doctor_infoScalarFieldEnum[] | Doctor_infoScalarFieldEnum
    having?: doctor_infoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Doctor_infoCountAggregateInputType | true
    _min?: Doctor_infoMinAggregateInputType
    _max?: Doctor_infoMaxAggregateInputType
  }

  export type Doctor_infoGroupByOutputType = {
    username: string
    name: string
    specialization: string
    degree: string
    phone: string
    email: string
    _count: Doctor_infoCountAggregateOutputType | null
    _min: Doctor_infoMinAggregateOutputType | null
    _max: Doctor_infoMaxAggregateOutputType | null
  }

  type GetDoctor_infoGroupByPayload<T extends doctor_infoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Doctor_infoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Doctor_infoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Doctor_infoGroupByOutputType[P]>
            : GetScalarType<T[P], Doctor_infoGroupByOutputType[P]>
        }
      >
    >


  export type doctor_infoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    username?: boolean
    name?: boolean
    specialization?: boolean
    degree?: boolean
    phone?: boolean
    email?: boolean
  }, ExtArgs["result"]["doctor_info"]>

  export type doctor_infoSelectScalar = {
    username?: boolean
    name?: boolean
    specialization?: boolean
    degree?: boolean
    phone?: boolean
    email?: boolean
  }


  export type $doctor_infoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "doctor_info"
    objects: {}
    scalars: $Extensions.GetResult<{
      username: string
      name: string
      specialization: string
      degree: string
      phone: string
      email: string
    }, ExtArgs["result"]["doctor_info"]>
    composites: {}
  }


  type doctor_infoGetPayload<S extends boolean | null | undefined | doctor_infoDefaultArgs> = $Result.GetResult<Prisma.$doctor_infoPayload, S>

  type doctor_infoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<doctor_infoFindManyArgs, 'select' | 'include'> & {
      select?: Doctor_infoCountAggregateInputType | true
    }

  export interface doctor_infoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['doctor_info'], meta: { name: 'doctor_info' } }
    /**
     * Find zero or one Doctor_info that matches the filter.
     * @param {doctor_infoFindUniqueArgs} args - Arguments to find a Doctor_info
     * @example
     * // Get one Doctor_info
     * const doctor_info = await prisma.doctor_info.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends doctor_infoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, doctor_infoFindUniqueArgs<ExtArgs>>
    ): Prisma__doctor_infoClient<$Result.GetResult<Prisma.$doctor_infoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Doctor_info that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {doctor_infoFindUniqueOrThrowArgs} args - Arguments to find a Doctor_info
     * @example
     * // Get one Doctor_info
     * const doctor_info = await prisma.doctor_info.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends doctor_infoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, doctor_infoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__doctor_infoClient<$Result.GetResult<Prisma.$doctor_infoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Doctor_info that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_infoFindFirstArgs} args - Arguments to find a Doctor_info
     * @example
     * // Get one Doctor_info
     * const doctor_info = await prisma.doctor_info.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends doctor_infoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, doctor_infoFindFirstArgs<ExtArgs>>
    ): Prisma__doctor_infoClient<$Result.GetResult<Prisma.$doctor_infoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Doctor_info that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_infoFindFirstOrThrowArgs} args - Arguments to find a Doctor_info
     * @example
     * // Get one Doctor_info
     * const doctor_info = await prisma.doctor_info.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends doctor_infoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, doctor_infoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__doctor_infoClient<$Result.GetResult<Prisma.$doctor_infoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Doctor_infos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_infoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctor_infos
     * const doctor_infos = await prisma.doctor_info.findMany()
     * 
     * // Get first 10 Doctor_infos
     * const doctor_infos = await prisma.doctor_info.findMany({ take: 10 })
     * 
     * // Only select the `username`
     * const doctor_infoWithUsernameOnly = await prisma.doctor_info.findMany({ select: { username: true } })
     * 
    **/
    findMany<T extends doctor_infoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, doctor_infoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$doctor_infoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Doctor_info.
     * @param {doctor_infoCreateArgs} args - Arguments to create a Doctor_info.
     * @example
     * // Create one Doctor_info
     * const Doctor_info = await prisma.doctor_info.create({
     *   data: {
     *     // ... data to create a Doctor_info
     *   }
     * })
     * 
    **/
    create<T extends doctor_infoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, doctor_infoCreateArgs<ExtArgs>>
    ): Prisma__doctor_infoClient<$Result.GetResult<Prisma.$doctor_infoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Doctor_infos.
     *     @param {doctor_infoCreateManyArgs} args - Arguments to create many Doctor_infos.
     *     @example
     *     // Create many Doctor_infos
     *     const doctor_info = await prisma.doctor_info.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends doctor_infoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, doctor_infoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Doctor_info.
     * @param {doctor_infoDeleteArgs} args - Arguments to delete one Doctor_info.
     * @example
     * // Delete one Doctor_info
     * const Doctor_info = await prisma.doctor_info.delete({
     *   where: {
     *     // ... filter to delete one Doctor_info
     *   }
     * })
     * 
    **/
    delete<T extends doctor_infoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, doctor_infoDeleteArgs<ExtArgs>>
    ): Prisma__doctor_infoClient<$Result.GetResult<Prisma.$doctor_infoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Doctor_info.
     * @param {doctor_infoUpdateArgs} args - Arguments to update one Doctor_info.
     * @example
     * // Update one Doctor_info
     * const doctor_info = await prisma.doctor_info.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends doctor_infoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, doctor_infoUpdateArgs<ExtArgs>>
    ): Prisma__doctor_infoClient<$Result.GetResult<Prisma.$doctor_infoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Doctor_infos.
     * @param {doctor_infoDeleteManyArgs} args - Arguments to filter Doctor_infos to delete.
     * @example
     * // Delete a few Doctor_infos
     * const { count } = await prisma.doctor_info.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends doctor_infoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, doctor_infoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctor_infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_infoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctor_infos
     * const doctor_info = await prisma.doctor_info.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends doctor_infoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, doctor_infoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Doctor_info.
     * @param {doctor_infoUpsertArgs} args - Arguments to update or create a Doctor_info.
     * @example
     * // Update or create a Doctor_info
     * const doctor_info = await prisma.doctor_info.upsert({
     *   create: {
     *     // ... data to create a Doctor_info
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctor_info we want to update
     *   }
     * })
    **/
    upsert<T extends doctor_infoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, doctor_infoUpsertArgs<ExtArgs>>
    ): Prisma__doctor_infoClient<$Result.GetResult<Prisma.$doctor_infoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Doctor_infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_infoCountArgs} args - Arguments to filter Doctor_infos to count.
     * @example
     * // Count the number of Doctor_infos
     * const count = await prisma.doctor_info.count({
     *   where: {
     *     // ... the filter for the Doctor_infos we want to count
     *   }
     * })
    **/
    count<T extends doctor_infoCountArgs>(
      args?: Subset<T, doctor_infoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Doctor_infoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctor_info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Doctor_infoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Doctor_infoAggregateArgs>(args: Subset<T, Doctor_infoAggregateArgs>): Prisma.PrismaPromise<GetDoctor_infoAggregateType<T>>

    /**
     * Group by Doctor_info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctor_infoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends doctor_infoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: doctor_infoGroupByArgs['orderBy'] }
        : { orderBy?: doctor_infoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, doctor_infoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctor_infoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the doctor_info model
   */
  readonly fields: doctor_infoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for doctor_info.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__doctor_infoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the doctor_info model
   */ 
  interface doctor_infoFieldRefs {
    readonly username: FieldRef<"doctor_info", 'String'>
    readonly name: FieldRef<"doctor_info", 'String'>
    readonly specialization: FieldRef<"doctor_info", 'String'>
    readonly degree: FieldRef<"doctor_info", 'String'>
    readonly phone: FieldRef<"doctor_info", 'String'>
    readonly email: FieldRef<"doctor_info", 'String'>
  }
    

  // Custom InputTypes

  /**
   * doctor_info findUnique
   */
  export type doctor_infoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_info
     */
    select?: doctor_infoSelect<ExtArgs> | null
    /**
     * Filter, which doctor_info to fetch.
     */
    where: doctor_infoWhereUniqueInput
  }


  /**
   * doctor_info findUniqueOrThrow
   */
  export type doctor_infoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_info
     */
    select?: doctor_infoSelect<ExtArgs> | null
    /**
     * Filter, which doctor_info to fetch.
     */
    where: doctor_infoWhereUniqueInput
  }


  /**
   * doctor_info findFirst
   */
  export type doctor_infoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_info
     */
    select?: doctor_infoSelect<ExtArgs> | null
    /**
     * Filter, which doctor_info to fetch.
     */
    where?: doctor_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctor_infos to fetch.
     */
    orderBy?: doctor_infoOrderByWithRelationInput | doctor_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for doctor_infos.
     */
    cursor?: doctor_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctor_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctor_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of doctor_infos.
     */
    distinct?: Doctor_infoScalarFieldEnum | Doctor_infoScalarFieldEnum[]
  }


  /**
   * doctor_info findFirstOrThrow
   */
  export type doctor_infoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_info
     */
    select?: doctor_infoSelect<ExtArgs> | null
    /**
     * Filter, which doctor_info to fetch.
     */
    where?: doctor_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctor_infos to fetch.
     */
    orderBy?: doctor_infoOrderByWithRelationInput | doctor_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for doctor_infos.
     */
    cursor?: doctor_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctor_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctor_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of doctor_infos.
     */
    distinct?: Doctor_infoScalarFieldEnum | Doctor_infoScalarFieldEnum[]
  }


  /**
   * doctor_info findMany
   */
  export type doctor_infoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_info
     */
    select?: doctor_infoSelect<ExtArgs> | null
    /**
     * Filter, which doctor_infos to fetch.
     */
    where?: doctor_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctor_infos to fetch.
     */
    orderBy?: doctor_infoOrderByWithRelationInput | doctor_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing doctor_infos.
     */
    cursor?: doctor_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctor_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctor_infos.
     */
    skip?: number
    distinct?: Doctor_infoScalarFieldEnum | Doctor_infoScalarFieldEnum[]
  }


  /**
   * doctor_info create
   */
  export type doctor_infoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_info
     */
    select?: doctor_infoSelect<ExtArgs> | null
    /**
     * The data needed to create a doctor_info.
     */
    data: XOR<doctor_infoCreateInput, doctor_infoUncheckedCreateInput>
  }


  /**
   * doctor_info createMany
   */
  export type doctor_infoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many doctor_infos.
     */
    data: doctor_infoCreateManyInput | doctor_infoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * doctor_info update
   */
  export type doctor_infoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_info
     */
    select?: doctor_infoSelect<ExtArgs> | null
    /**
     * The data needed to update a doctor_info.
     */
    data: XOR<doctor_infoUpdateInput, doctor_infoUncheckedUpdateInput>
    /**
     * Choose, which doctor_info to update.
     */
    where: doctor_infoWhereUniqueInput
  }


  /**
   * doctor_info updateMany
   */
  export type doctor_infoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update doctor_infos.
     */
    data: XOR<doctor_infoUpdateManyMutationInput, doctor_infoUncheckedUpdateManyInput>
    /**
     * Filter which doctor_infos to update
     */
    where?: doctor_infoWhereInput
  }


  /**
   * doctor_info upsert
   */
  export type doctor_infoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_info
     */
    select?: doctor_infoSelect<ExtArgs> | null
    /**
     * The filter to search for the doctor_info to update in case it exists.
     */
    where: doctor_infoWhereUniqueInput
    /**
     * In case the doctor_info found by the `where` argument doesn't exist, create a new doctor_info with this data.
     */
    create: XOR<doctor_infoCreateInput, doctor_infoUncheckedCreateInput>
    /**
     * In case the doctor_info was found with the provided `where` argument, update it with this data.
     */
    update: XOR<doctor_infoUpdateInput, doctor_infoUncheckedUpdateInput>
  }


  /**
   * doctor_info delete
   */
  export type doctor_infoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_info
     */
    select?: doctor_infoSelect<ExtArgs> | null
    /**
     * Filter which doctor_info to delete.
     */
    where: doctor_infoWhereUniqueInput
  }


  /**
   * doctor_info deleteMany
   */
  export type doctor_infoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which doctor_infos to delete
     */
    where?: doctor_infoWhereInput
  }


  /**
   * doctor_info without action
   */
  export type doctor_infoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor_info
     */
    select?: doctor_infoSelect<ExtArgs> | null
  }



  /**
   * Model receptionist_info
   */

  export type AggregateReceptionist_info = {
    _count: Receptionist_infoCountAggregateOutputType | null
    _min: Receptionist_infoMinAggregateOutputType | null
    _max: Receptionist_infoMaxAggregateOutputType | null
  }

  export type Receptionist_infoMinAggregateOutputType = {
    username: string | null
    name: string | null
    phone: string | null
  }

  export type Receptionist_infoMaxAggregateOutputType = {
    username: string | null
    name: string | null
    phone: string | null
  }

  export type Receptionist_infoCountAggregateOutputType = {
    username: number
    name: number
    phone: number
    _all: number
  }


  export type Receptionist_infoMinAggregateInputType = {
    username?: true
    name?: true
    phone?: true
  }

  export type Receptionist_infoMaxAggregateInputType = {
    username?: true
    name?: true
    phone?: true
  }

  export type Receptionist_infoCountAggregateInputType = {
    username?: true
    name?: true
    phone?: true
    _all?: true
  }

  export type Receptionist_infoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which receptionist_info to aggregate.
     */
    where?: receptionist_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of receptionist_infos to fetch.
     */
    orderBy?: receptionist_infoOrderByWithRelationInput | receptionist_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: receptionist_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` receptionist_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` receptionist_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned receptionist_infos
    **/
    _count?: true | Receptionist_infoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Receptionist_infoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Receptionist_infoMaxAggregateInputType
  }

  export type GetReceptionist_infoAggregateType<T extends Receptionist_infoAggregateArgs> = {
        [P in keyof T & keyof AggregateReceptionist_info]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceptionist_info[P]>
      : GetScalarType<T[P], AggregateReceptionist_info[P]>
  }




  export type receptionist_infoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: receptionist_infoWhereInput
    orderBy?: receptionist_infoOrderByWithAggregationInput | receptionist_infoOrderByWithAggregationInput[]
    by: Receptionist_infoScalarFieldEnum[] | Receptionist_infoScalarFieldEnum
    having?: receptionist_infoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Receptionist_infoCountAggregateInputType | true
    _min?: Receptionist_infoMinAggregateInputType
    _max?: Receptionist_infoMaxAggregateInputType
  }

  export type Receptionist_infoGroupByOutputType = {
    username: string
    name: string
    phone: string
    _count: Receptionist_infoCountAggregateOutputType | null
    _min: Receptionist_infoMinAggregateOutputType | null
    _max: Receptionist_infoMaxAggregateOutputType | null
  }

  type GetReceptionist_infoGroupByPayload<T extends receptionist_infoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Receptionist_infoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Receptionist_infoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Receptionist_infoGroupByOutputType[P]>
            : GetScalarType<T[P], Receptionist_infoGroupByOutputType[P]>
        }
      >
    >


  export type receptionist_infoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    username?: boolean
    name?: boolean
    phone?: boolean
  }, ExtArgs["result"]["receptionist_info"]>

  export type receptionist_infoSelectScalar = {
    username?: boolean
    name?: boolean
    phone?: boolean
  }


  export type $receptionist_infoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "receptionist_info"
    objects: {}
    scalars: $Extensions.GetResult<{
      username: string
      name: string
      phone: string
    }, ExtArgs["result"]["receptionist_info"]>
    composites: {}
  }


  type receptionist_infoGetPayload<S extends boolean | null | undefined | receptionist_infoDefaultArgs> = $Result.GetResult<Prisma.$receptionist_infoPayload, S>

  type receptionist_infoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<receptionist_infoFindManyArgs, 'select' | 'include'> & {
      select?: Receptionist_infoCountAggregateInputType | true
    }

  export interface receptionist_infoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['receptionist_info'], meta: { name: 'receptionist_info' } }
    /**
     * Find zero or one Receptionist_info that matches the filter.
     * @param {receptionist_infoFindUniqueArgs} args - Arguments to find a Receptionist_info
     * @example
     * // Get one Receptionist_info
     * const receptionist_info = await prisma.receptionist_info.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends receptionist_infoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, receptionist_infoFindUniqueArgs<ExtArgs>>
    ): Prisma__receptionist_infoClient<$Result.GetResult<Prisma.$receptionist_infoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Receptionist_info that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {receptionist_infoFindUniqueOrThrowArgs} args - Arguments to find a Receptionist_info
     * @example
     * // Get one Receptionist_info
     * const receptionist_info = await prisma.receptionist_info.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends receptionist_infoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, receptionist_infoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__receptionist_infoClient<$Result.GetResult<Prisma.$receptionist_infoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Receptionist_info that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {receptionist_infoFindFirstArgs} args - Arguments to find a Receptionist_info
     * @example
     * // Get one Receptionist_info
     * const receptionist_info = await prisma.receptionist_info.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends receptionist_infoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, receptionist_infoFindFirstArgs<ExtArgs>>
    ): Prisma__receptionist_infoClient<$Result.GetResult<Prisma.$receptionist_infoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Receptionist_info that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {receptionist_infoFindFirstOrThrowArgs} args - Arguments to find a Receptionist_info
     * @example
     * // Get one Receptionist_info
     * const receptionist_info = await prisma.receptionist_info.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends receptionist_infoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, receptionist_infoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__receptionist_infoClient<$Result.GetResult<Prisma.$receptionist_infoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Receptionist_infos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {receptionist_infoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Receptionist_infos
     * const receptionist_infos = await prisma.receptionist_info.findMany()
     * 
     * // Get first 10 Receptionist_infos
     * const receptionist_infos = await prisma.receptionist_info.findMany({ take: 10 })
     * 
     * // Only select the `username`
     * const receptionist_infoWithUsernameOnly = await prisma.receptionist_info.findMany({ select: { username: true } })
     * 
    **/
    findMany<T extends receptionist_infoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, receptionist_infoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$receptionist_infoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Receptionist_info.
     * @param {receptionist_infoCreateArgs} args - Arguments to create a Receptionist_info.
     * @example
     * // Create one Receptionist_info
     * const Receptionist_info = await prisma.receptionist_info.create({
     *   data: {
     *     // ... data to create a Receptionist_info
     *   }
     * })
     * 
    **/
    create<T extends receptionist_infoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, receptionist_infoCreateArgs<ExtArgs>>
    ): Prisma__receptionist_infoClient<$Result.GetResult<Prisma.$receptionist_infoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Receptionist_infos.
     *     @param {receptionist_infoCreateManyArgs} args - Arguments to create many Receptionist_infos.
     *     @example
     *     // Create many Receptionist_infos
     *     const receptionist_info = await prisma.receptionist_info.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends receptionist_infoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, receptionist_infoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Receptionist_info.
     * @param {receptionist_infoDeleteArgs} args - Arguments to delete one Receptionist_info.
     * @example
     * // Delete one Receptionist_info
     * const Receptionist_info = await prisma.receptionist_info.delete({
     *   where: {
     *     // ... filter to delete one Receptionist_info
     *   }
     * })
     * 
    **/
    delete<T extends receptionist_infoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, receptionist_infoDeleteArgs<ExtArgs>>
    ): Prisma__receptionist_infoClient<$Result.GetResult<Prisma.$receptionist_infoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Receptionist_info.
     * @param {receptionist_infoUpdateArgs} args - Arguments to update one Receptionist_info.
     * @example
     * // Update one Receptionist_info
     * const receptionist_info = await prisma.receptionist_info.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends receptionist_infoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, receptionist_infoUpdateArgs<ExtArgs>>
    ): Prisma__receptionist_infoClient<$Result.GetResult<Prisma.$receptionist_infoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Receptionist_infos.
     * @param {receptionist_infoDeleteManyArgs} args - Arguments to filter Receptionist_infos to delete.
     * @example
     * // Delete a few Receptionist_infos
     * const { count } = await prisma.receptionist_info.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends receptionist_infoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, receptionist_infoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Receptionist_infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {receptionist_infoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Receptionist_infos
     * const receptionist_info = await prisma.receptionist_info.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends receptionist_infoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, receptionist_infoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Receptionist_info.
     * @param {receptionist_infoUpsertArgs} args - Arguments to update or create a Receptionist_info.
     * @example
     * // Update or create a Receptionist_info
     * const receptionist_info = await prisma.receptionist_info.upsert({
     *   create: {
     *     // ... data to create a Receptionist_info
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Receptionist_info we want to update
     *   }
     * })
    **/
    upsert<T extends receptionist_infoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, receptionist_infoUpsertArgs<ExtArgs>>
    ): Prisma__receptionist_infoClient<$Result.GetResult<Prisma.$receptionist_infoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Receptionist_infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {receptionist_infoCountArgs} args - Arguments to filter Receptionist_infos to count.
     * @example
     * // Count the number of Receptionist_infos
     * const count = await prisma.receptionist_info.count({
     *   where: {
     *     // ... the filter for the Receptionist_infos we want to count
     *   }
     * })
    **/
    count<T extends receptionist_infoCountArgs>(
      args?: Subset<T, receptionist_infoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Receptionist_infoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Receptionist_info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Receptionist_infoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Receptionist_infoAggregateArgs>(args: Subset<T, Receptionist_infoAggregateArgs>): Prisma.PrismaPromise<GetReceptionist_infoAggregateType<T>>

    /**
     * Group by Receptionist_info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {receptionist_infoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends receptionist_infoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: receptionist_infoGroupByArgs['orderBy'] }
        : { orderBy?: receptionist_infoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, receptionist_infoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceptionist_infoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the receptionist_info model
   */
  readonly fields: receptionist_infoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for receptionist_info.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__receptionist_infoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the receptionist_info model
   */ 
  interface receptionist_infoFieldRefs {
    readonly username: FieldRef<"receptionist_info", 'String'>
    readonly name: FieldRef<"receptionist_info", 'String'>
    readonly phone: FieldRef<"receptionist_info", 'String'>
  }
    

  // Custom InputTypes

  /**
   * receptionist_info findUnique
   */
  export type receptionist_infoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receptionist_info
     */
    select?: receptionist_infoSelect<ExtArgs> | null
    /**
     * Filter, which receptionist_info to fetch.
     */
    where: receptionist_infoWhereUniqueInput
  }


  /**
   * receptionist_info findUniqueOrThrow
   */
  export type receptionist_infoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receptionist_info
     */
    select?: receptionist_infoSelect<ExtArgs> | null
    /**
     * Filter, which receptionist_info to fetch.
     */
    where: receptionist_infoWhereUniqueInput
  }


  /**
   * receptionist_info findFirst
   */
  export type receptionist_infoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receptionist_info
     */
    select?: receptionist_infoSelect<ExtArgs> | null
    /**
     * Filter, which receptionist_info to fetch.
     */
    where?: receptionist_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of receptionist_infos to fetch.
     */
    orderBy?: receptionist_infoOrderByWithRelationInput | receptionist_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for receptionist_infos.
     */
    cursor?: receptionist_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` receptionist_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` receptionist_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of receptionist_infos.
     */
    distinct?: Receptionist_infoScalarFieldEnum | Receptionist_infoScalarFieldEnum[]
  }


  /**
   * receptionist_info findFirstOrThrow
   */
  export type receptionist_infoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receptionist_info
     */
    select?: receptionist_infoSelect<ExtArgs> | null
    /**
     * Filter, which receptionist_info to fetch.
     */
    where?: receptionist_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of receptionist_infos to fetch.
     */
    orderBy?: receptionist_infoOrderByWithRelationInput | receptionist_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for receptionist_infos.
     */
    cursor?: receptionist_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` receptionist_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` receptionist_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of receptionist_infos.
     */
    distinct?: Receptionist_infoScalarFieldEnum | Receptionist_infoScalarFieldEnum[]
  }


  /**
   * receptionist_info findMany
   */
  export type receptionist_infoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receptionist_info
     */
    select?: receptionist_infoSelect<ExtArgs> | null
    /**
     * Filter, which receptionist_infos to fetch.
     */
    where?: receptionist_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of receptionist_infos to fetch.
     */
    orderBy?: receptionist_infoOrderByWithRelationInput | receptionist_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing receptionist_infos.
     */
    cursor?: receptionist_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` receptionist_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` receptionist_infos.
     */
    skip?: number
    distinct?: Receptionist_infoScalarFieldEnum | Receptionist_infoScalarFieldEnum[]
  }


  /**
   * receptionist_info create
   */
  export type receptionist_infoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receptionist_info
     */
    select?: receptionist_infoSelect<ExtArgs> | null
    /**
     * The data needed to create a receptionist_info.
     */
    data: XOR<receptionist_infoCreateInput, receptionist_infoUncheckedCreateInput>
  }


  /**
   * receptionist_info createMany
   */
  export type receptionist_infoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many receptionist_infos.
     */
    data: receptionist_infoCreateManyInput | receptionist_infoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * receptionist_info update
   */
  export type receptionist_infoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receptionist_info
     */
    select?: receptionist_infoSelect<ExtArgs> | null
    /**
     * The data needed to update a receptionist_info.
     */
    data: XOR<receptionist_infoUpdateInput, receptionist_infoUncheckedUpdateInput>
    /**
     * Choose, which receptionist_info to update.
     */
    where: receptionist_infoWhereUniqueInput
  }


  /**
   * receptionist_info updateMany
   */
  export type receptionist_infoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update receptionist_infos.
     */
    data: XOR<receptionist_infoUpdateManyMutationInput, receptionist_infoUncheckedUpdateManyInput>
    /**
     * Filter which receptionist_infos to update
     */
    where?: receptionist_infoWhereInput
  }


  /**
   * receptionist_info upsert
   */
  export type receptionist_infoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receptionist_info
     */
    select?: receptionist_infoSelect<ExtArgs> | null
    /**
     * The filter to search for the receptionist_info to update in case it exists.
     */
    where: receptionist_infoWhereUniqueInput
    /**
     * In case the receptionist_info found by the `where` argument doesn't exist, create a new receptionist_info with this data.
     */
    create: XOR<receptionist_infoCreateInput, receptionist_infoUncheckedCreateInput>
    /**
     * In case the receptionist_info was found with the provided `where` argument, update it with this data.
     */
    update: XOR<receptionist_infoUpdateInput, receptionist_infoUncheckedUpdateInput>
  }


  /**
   * receptionist_info delete
   */
  export type receptionist_infoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receptionist_info
     */
    select?: receptionist_infoSelect<ExtArgs> | null
    /**
     * Filter which receptionist_info to delete.
     */
    where: receptionist_infoWhereUniqueInput
  }


  /**
   * receptionist_info deleteMany
   */
  export type receptionist_infoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which receptionist_infos to delete
     */
    where?: receptionist_infoWhereInput
  }


  /**
   * receptionist_info without action
   */
  export type receptionist_infoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receptionist_info
     */
    select?: receptionist_infoSelect<ExtArgs> | null
  }



  /**
   * Model intern_info
   */

  export type AggregateIntern_info = {
    _count: Intern_infoCountAggregateOutputType | null
    _min: Intern_infoMinAggregateOutputType | null
    _max: Intern_infoMaxAggregateOutputType | null
  }

  export type Intern_infoMinAggregateOutputType = {
    username: string | null
    name: string | null
    phone: string | null
  }

  export type Intern_infoMaxAggregateOutputType = {
    username: string | null
    name: string | null
    phone: string | null
  }

  export type Intern_infoCountAggregateOutputType = {
    username: number
    name: number
    phone: number
    _all: number
  }


  export type Intern_infoMinAggregateInputType = {
    username?: true
    name?: true
    phone?: true
  }

  export type Intern_infoMaxAggregateInputType = {
    username?: true
    name?: true
    phone?: true
  }

  export type Intern_infoCountAggregateInputType = {
    username?: true
    name?: true
    phone?: true
    _all?: true
  }

  export type Intern_infoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which intern_info to aggregate.
     */
    where?: intern_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of intern_infos to fetch.
     */
    orderBy?: intern_infoOrderByWithRelationInput | intern_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: intern_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` intern_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` intern_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned intern_infos
    **/
    _count?: true | Intern_infoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Intern_infoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Intern_infoMaxAggregateInputType
  }

  export type GetIntern_infoAggregateType<T extends Intern_infoAggregateArgs> = {
        [P in keyof T & keyof AggregateIntern_info]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIntern_info[P]>
      : GetScalarType<T[P], AggregateIntern_info[P]>
  }




  export type intern_infoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: intern_infoWhereInput
    orderBy?: intern_infoOrderByWithAggregationInput | intern_infoOrderByWithAggregationInput[]
    by: Intern_infoScalarFieldEnum[] | Intern_infoScalarFieldEnum
    having?: intern_infoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Intern_infoCountAggregateInputType | true
    _min?: Intern_infoMinAggregateInputType
    _max?: Intern_infoMaxAggregateInputType
  }

  export type Intern_infoGroupByOutputType = {
    username: string
    name: string
    phone: string
    _count: Intern_infoCountAggregateOutputType | null
    _min: Intern_infoMinAggregateOutputType | null
    _max: Intern_infoMaxAggregateOutputType | null
  }

  type GetIntern_infoGroupByPayload<T extends intern_infoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Intern_infoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Intern_infoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Intern_infoGroupByOutputType[P]>
            : GetScalarType<T[P], Intern_infoGroupByOutputType[P]>
        }
      >
    >


  export type intern_infoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    username?: boolean
    name?: boolean
    phone?: boolean
  }, ExtArgs["result"]["intern_info"]>

  export type intern_infoSelectScalar = {
    username?: boolean
    name?: boolean
    phone?: boolean
  }


  export type $intern_infoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "intern_info"
    objects: {}
    scalars: $Extensions.GetResult<{
      username: string
      name: string
      phone: string
    }, ExtArgs["result"]["intern_info"]>
    composites: {}
  }


  type intern_infoGetPayload<S extends boolean | null | undefined | intern_infoDefaultArgs> = $Result.GetResult<Prisma.$intern_infoPayload, S>

  type intern_infoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<intern_infoFindManyArgs, 'select' | 'include'> & {
      select?: Intern_infoCountAggregateInputType | true
    }

  export interface intern_infoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['intern_info'], meta: { name: 'intern_info' } }
    /**
     * Find zero or one Intern_info that matches the filter.
     * @param {intern_infoFindUniqueArgs} args - Arguments to find a Intern_info
     * @example
     * // Get one Intern_info
     * const intern_info = await prisma.intern_info.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends intern_infoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, intern_infoFindUniqueArgs<ExtArgs>>
    ): Prisma__intern_infoClient<$Result.GetResult<Prisma.$intern_infoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Intern_info that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {intern_infoFindUniqueOrThrowArgs} args - Arguments to find a Intern_info
     * @example
     * // Get one Intern_info
     * const intern_info = await prisma.intern_info.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends intern_infoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, intern_infoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__intern_infoClient<$Result.GetResult<Prisma.$intern_infoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Intern_info that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {intern_infoFindFirstArgs} args - Arguments to find a Intern_info
     * @example
     * // Get one Intern_info
     * const intern_info = await prisma.intern_info.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends intern_infoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, intern_infoFindFirstArgs<ExtArgs>>
    ): Prisma__intern_infoClient<$Result.GetResult<Prisma.$intern_infoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Intern_info that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {intern_infoFindFirstOrThrowArgs} args - Arguments to find a Intern_info
     * @example
     * // Get one Intern_info
     * const intern_info = await prisma.intern_info.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends intern_infoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, intern_infoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__intern_infoClient<$Result.GetResult<Prisma.$intern_infoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Intern_infos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {intern_infoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Intern_infos
     * const intern_infos = await prisma.intern_info.findMany()
     * 
     * // Get first 10 Intern_infos
     * const intern_infos = await prisma.intern_info.findMany({ take: 10 })
     * 
     * // Only select the `username`
     * const intern_infoWithUsernameOnly = await prisma.intern_info.findMany({ select: { username: true } })
     * 
    **/
    findMany<T extends intern_infoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, intern_infoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$intern_infoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Intern_info.
     * @param {intern_infoCreateArgs} args - Arguments to create a Intern_info.
     * @example
     * // Create one Intern_info
     * const Intern_info = await prisma.intern_info.create({
     *   data: {
     *     // ... data to create a Intern_info
     *   }
     * })
     * 
    **/
    create<T extends intern_infoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, intern_infoCreateArgs<ExtArgs>>
    ): Prisma__intern_infoClient<$Result.GetResult<Prisma.$intern_infoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Intern_infos.
     *     @param {intern_infoCreateManyArgs} args - Arguments to create many Intern_infos.
     *     @example
     *     // Create many Intern_infos
     *     const intern_info = await prisma.intern_info.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends intern_infoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, intern_infoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Intern_info.
     * @param {intern_infoDeleteArgs} args - Arguments to delete one Intern_info.
     * @example
     * // Delete one Intern_info
     * const Intern_info = await prisma.intern_info.delete({
     *   where: {
     *     // ... filter to delete one Intern_info
     *   }
     * })
     * 
    **/
    delete<T extends intern_infoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, intern_infoDeleteArgs<ExtArgs>>
    ): Prisma__intern_infoClient<$Result.GetResult<Prisma.$intern_infoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Intern_info.
     * @param {intern_infoUpdateArgs} args - Arguments to update one Intern_info.
     * @example
     * // Update one Intern_info
     * const intern_info = await prisma.intern_info.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends intern_infoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, intern_infoUpdateArgs<ExtArgs>>
    ): Prisma__intern_infoClient<$Result.GetResult<Prisma.$intern_infoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Intern_infos.
     * @param {intern_infoDeleteManyArgs} args - Arguments to filter Intern_infos to delete.
     * @example
     * // Delete a few Intern_infos
     * const { count } = await prisma.intern_info.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends intern_infoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, intern_infoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Intern_infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {intern_infoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Intern_infos
     * const intern_info = await prisma.intern_info.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends intern_infoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, intern_infoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Intern_info.
     * @param {intern_infoUpsertArgs} args - Arguments to update or create a Intern_info.
     * @example
     * // Update or create a Intern_info
     * const intern_info = await prisma.intern_info.upsert({
     *   create: {
     *     // ... data to create a Intern_info
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Intern_info we want to update
     *   }
     * })
    **/
    upsert<T extends intern_infoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, intern_infoUpsertArgs<ExtArgs>>
    ): Prisma__intern_infoClient<$Result.GetResult<Prisma.$intern_infoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Intern_infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {intern_infoCountArgs} args - Arguments to filter Intern_infos to count.
     * @example
     * // Count the number of Intern_infos
     * const count = await prisma.intern_info.count({
     *   where: {
     *     // ... the filter for the Intern_infos we want to count
     *   }
     * })
    **/
    count<T extends intern_infoCountArgs>(
      args?: Subset<T, intern_infoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Intern_infoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Intern_info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Intern_infoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Intern_infoAggregateArgs>(args: Subset<T, Intern_infoAggregateArgs>): Prisma.PrismaPromise<GetIntern_infoAggregateType<T>>

    /**
     * Group by Intern_info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {intern_infoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends intern_infoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: intern_infoGroupByArgs['orderBy'] }
        : { orderBy?: intern_infoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, intern_infoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIntern_infoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the intern_info model
   */
  readonly fields: intern_infoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for intern_info.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__intern_infoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the intern_info model
   */ 
  interface intern_infoFieldRefs {
    readonly username: FieldRef<"intern_info", 'String'>
    readonly name: FieldRef<"intern_info", 'String'>
    readonly phone: FieldRef<"intern_info", 'String'>
  }
    

  // Custom InputTypes

  /**
   * intern_info findUnique
   */
  export type intern_infoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the intern_info
     */
    select?: intern_infoSelect<ExtArgs> | null
    /**
     * Filter, which intern_info to fetch.
     */
    where: intern_infoWhereUniqueInput
  }


  /**
   * intern_info findUniqueOrThrow
   */
  export type intern_infoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the intern_info
     */
    select?: intern_infoSelect<ExtArgs> | null
    /**
     * Filter, which intern_info to fetch.
     */
    where: intern_infoWhereUniqueInput
  }


  /**
   * intern_info findFirst
   */
  export type intern_infoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the intern_info
     */
    select?: intern_infoSelect<ExtArgs> | null
    /**
     * Filter, which intern_info to fetch.
     */
    where?: intern_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of intern_infos to fetch.
     */
    orderBy?: intern_infoOrderByWithRelationInput | intern_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for intern_infos.
     */
    cursor?: intern_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` intern_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` intern_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of intern_infos.
     */
    distinct?: Intern_infoScalarFieldEnum | Intern_infoScalarFieldEnum[]
  }


  /**
   * intern_info findFirstOrThrow
   */
  export type intern_infoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the intern_info
     */
    select?: intern_infoSelect<ExtArgs> | null
    /**
     * Filter, which intern_info to fetch.
     */
    where?: intern_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of intern_infos to fetch.
     */
    orderBy?: intern_infoOrderByWithRelationInput | intern_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for intern_infos.
     */
    cursor?: intern_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` intern_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` intern_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of intern_infos.
     */
    distinct?: Intern_infoScalarFieldEnum | Intern_infoScalarFieldEnum[]
  }


  /**
   * intern_info findMany
   */
  export type intern_infoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the intern_info
     */
    select?: intern_infoSelect<ExtArgs> | null
    /**
     * Filter, which intern_infos to fetch.
     */
    where?: intern_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of intern_infos to fetch.
     */
    orderBy?: intern_infoOrderByWithRelationInput | intern_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing intern_infos.
     */
    cursor?: intern_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` intern_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` intern_infos.
     */
    skip?: number
    distinct?: Intern_infoScalarFieldEnum | Intern_infoScalarFieldEnum[]
  }


  /**
   * intern_info create
   */
  export type intern_infoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the intern_info
     */
    select?: intern_infoSelect<ExtArgs> | null
    /**
     * The data needed to create a intern_info.
     */
    data: XOR<intern_infoCreateInput, intern_infoUncheckedCreateInput>
  }


  /**
   * intern_info createMany
   */
  export type intern_infoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many intern_infos.
     */
    data: intern_infoCreateManyInput | intern_infoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * intern_info update
   */
  export type intern_infoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the intern_info
     */
    select?: intern_infoSelect<ExtArgs> | null
    /**
     * The data needed to update a intern_info.
     */
    data: XOR<intern_infoUpdateInput, intern_infoUncheckedUpdateInput>
    /**
     * Choose, which intern_info to update.
     */
    where: intern_infoWhereUniqueInput
  }


  /**
   * intern_info updateMany
   */
  export type intern_infoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update intern_infos.
     */
    data: XOR<intern_infoUpdateManyMutationInput, intern_infoUncheckedUpdateManyInput>
    /**
     * Filter which intern_infos to update
     */
    where?: intern_infoWhereInput
  }


  /**
   * intern_info upsert
   */
  export type intern_infoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the intern_info
     */
    select?: intern_infoSelect<ExtArgs> | null
    /**
     * The filter to search for the intern_info to update in case it exists.
     */
    where: intern_infoWhereUniqueInput
    /**
     * In case the intern_info found by the `where` argument doesn't exist, create a new intern_info with this data.
     */
    create: XOR<intern_infoCreateInput, intern_infoUncheckedCreateInput>
    /**
     * In case the intern_info was found with the provided `where` argument, update it with this data.
     */
    update: XOR<intern_infoUpdateInput, intern_infoUncheckedUpdateInput>
  }


  /**
   * intern_info delete
   */
  export type intern_infoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the intern_info
     */
    select?: intern_infoSelect<ExtArgs> | null
    /**
     * Filter which intern_info to delete.
     */
    where: intern_infoWhereUniqueInput
  }


  /**
   * intern_info deleteMany
   */
  export type intern_infoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which intern_infos to delete
     */
    where?: intern_infoWhereInput
  }


  /**
   * intern_info without action
   */
  export type intern_infoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the intern_info
     */
    select?: intern_infoSelect<ExtArgs> | null
  }



  /**
   * Model patient_basic_info
   */

  export type AggregatePatient_basic_info = {
    _count: Patient_basic_infoCountAggregateOutputType | null
    _avg: Patient_basic_infoAvgAggregateOutputType | null
    _sum: Patient_basic_infoSumAggregateOutputType | null
    _min: Patient_basic_infoMinAggregateOutputType | null
    _max: Patient_basic_infoMaxAggregateOutputType | null
  }

  export type Patient_basic_infoAvgAggregateOutputType = {
    id: number | null
    age: number | null
  }

  export type Patient_basic_infoSumAggregateOutputType = {
    id: number | null
    age: number | null
  }

  export type Patient_basic_infoMinAggregateOutputType = {
    id: number | null
    name: string | null
    age: number | null
    phone: string | null
    address: string | null
    occupation: string | null
    nid: string | null
    dob: Date | null
    gender: string | null
  }

  export type Patient_basic_infoMaxAggregateOutputType = {
    id: number | null
    name: string | null
    age: number | null
    phone: string | null
    address: string | null
    occupation: string | null
    nid: string | null
    dob: Date | null
    gender: string | null
  }

  export type Patient_basic_infoCountAggregateOutputType = {
    id: number
    name: number
    age: number
    phone: number
    address: number
    occupation: number
    nid: number
    dob: number
    gender: number
    _all: number
  }


  export type Patient_basic_infoAvgAggregateInputType = {
    id?: true
    age?: true
  }

  export type Patient_basic_infoSumAggregateInputType = {
    id?: true
    age?: true
  }

  export type Patient_basic_infoMinAggregateInputType = {
    id?: true
    name?: true
    age?: true
    phone?: true
    address?: true
    occupation?: true
    nid?: true
    dob?: true
    gender?: true
  }

  export type Patient_basic_infoMaxAggregateInputType = {
    id?: true
    name?: true
    age?: true
    phone?: true
    address?: true
    occupation?: true
    nid?: true
    dob?: true
    gender?: true
  }

  export type Patient_basic_infoCountAggregateInputType = {
    id?: true
    name?: true
    age?: true
    phone?: true
    address?: true
    occupation?: true
    nid?: true
    dob?: true
    gender?: true
    _all?: true
  }

  export type Patient_basic_infoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which patient_basic_info to aggregate.
     */
    where?: patient_basic_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patient_basic_infos to fetch.
     */
    orderBy?: patient_basic_infoOrderByWithRelationInput | patient_basic_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: patient_basic_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patient_basic_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patient_basic_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned patient_basic_infos
    **/
    _count?: true | Patient_basic_infoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Patient_basic_infoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Patient_basic_infoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Patient_basic_infoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Patient_basic_infoMaxAggregateInputType
  }

  export type GetPatient_basic_infoAggregateType<T extends Patient_basic_infoAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient_basic_info]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient_basic_info[P]>
      : GetScalarType<T[P], AggregatePatient_basic_info[P]>
  }




  export type patient_basic_infoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: patient_basic_infoWhereInput
    orderBy?: patient_basic_infoOrderByWithAggregationInput | patient_basic_infoOrderByWithAggregationInput[]
    by: Patient_basic_infoScalarFieldEnum[] | Patient_basic_infoScalarFieldEnum
    having?: patient_basic_infoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Patient_basic_infoCountAggregateInputType | true
    _avg?: Patient_basic_infoAvgAggregateInputType
    _sum?: Patient_basic_infoSumAggregateInputType
    _min?: Patient_basic_infoMinAggregateInputType
    _max?: Patient_basic_infoMaxAggregateInputType
  }

  export type Patient_basic_infoGroupByOutputType = {
    id: number
    name: string
    age: number
    phone: string
    address: string
    occupation: string
    nid: string | null
    dob: Date
    gender: string
    _count: Patient_basic_infoCountAggregateOutputType | null
    _avg: Patient_basic_infoAvgAggregateOutputType | null
    _sum: Patient_basic_infoSumAggregateOutputType | null
    _min: Patient_basic_infoMinAggregateOutputType | null
    _max: Patient_basic_infoMaxAggregateOutputType | null
  }

  type GetPatient_basic_infoGroupByPayload<T extends patient_basic_infoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Patient_basic_infoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Patient_basic_infoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Patient_basic_infoGroupByOutputType[P]>
            : GetScalarType<T[P], Patient_basic_infoGroupByOutputType[P]>
        }
      >
    >


  export type patient_basic_infoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    age?: boolean
    phone?: boolean
    address?: boolean
    occupation?: boolean
    nid?: boolean
    dob?: boolean
    gender?: boolean
  }, ExtArgs["result"]["patient_basic_info"]>

  export type patient_basic_infoSelectScalar = {
    id?: boolean
    name?: boolean
    age?: boolean
    phone?: boolean
    address?: boolean
    occupation?: boolean
    nid?: boolean
    dob?: boolean
    gender?: boolean
  }


  export type $patient_basic_infoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "patient_basic_info"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: number
      name: string
      age: number
      phone: string
      address: string
      occupation: string
      nid: string | null
      dob: Date
      gender: string
    }, ExtArgs["result"]["patient_basic_info"]>
    composites: {}
  }


  type patient_basic_infoGetPayload<S extends boolean | null | undefined | patient_basic_infoDefaultArgs> = $Result.GetResult<Prisma.$patient_basic_infoPayload, S>

  type patient_basic_infoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<patient_basic_infoFindManyArgs, 'select' | 'include'> & {
      select?: Patient_basic_infoCountAggregateInputType | true
    }

  export interface patient_basic_infoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['patient_basic_info'], meta: { name: 'patient_basic_info' } }
    /**
     * Find zero or one Patient_basic_info that matches the filter.
     * @param {patient_basic_infoFindUniqueArgs} args - Arguments to find a Patient_basic_info
     * @example
     * // Get one Patient_basic_info
     * const patient_basic_info = await prisma.patient_basic_info.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends patient_basic_infoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, patient_basic_infoFindUniqueArgs<ExtArgs>>
    ): Prisma__patient_basic_infoClient<$Result.GetResult<Prisma.$patient_basic_infoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Patient_basic_info that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {patient_basic_infoFindUniqueOrThrowArgs} args - Arguments to find a Patient_basic_info
     * @example
     * // Get one Patient_basic_info
     * const patient_basic_info = await prisma.patient_basic_info.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends patient_basic_infoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, patient_basic_infoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__patient_basic_infoClient<$Result.GetResult<Prisma.$patient_basic_infoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Patient_basic_info that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patient_basic_infoFindFirstArgs} args - Arguments to find a Patient_basic_info
     * @example
     * // Get one Patient_basic_info
     * const patient_basic_info = await prisma.patient_basic_info.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends patient_basic_infoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, patient_basic_infoFindFirstArgs<ExtArgs>>
    ): Prisma__patient_basic_infoClient<$Result.GetResult<Prisma.$patient_basic_infoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Patient_basic_info that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patient_basic_infoFindFirstOrThrowArgs} args - Arguments to find a Patient_basic_info
     * @example
     * // Get one Patient_basic_info
     * const patient_basic_info = await prisma.patient_basic_info.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends patient_basic_infoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, patient_basic_infoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__patient_basic_infoClient<$Result.GetResult<Prisma.$patient_basic_infoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Patient_basic_infos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patient_basic_infoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patient_basic_infos
     * const patient_basic_infos = await prisma.patient_basic_info.findMany()
     * 
     * // Get first 10 Patient_basic_infos
     * const patient_basic_infos = await prisma.patient_basic_info.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patient_basic_infoWithIdOnly = await prisma.patient_basic_info.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends patient_basic_infoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, patient_basic_infoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$patient_basic_infoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Patient_basic_info.
     * @param {patient_basic_infoCreateArgs} args - Arguments to create a Patient_basic_info.
     * @example
     * // Create one Patient_basic_info
     * const Patient_basic_info = await prisma.patient_basic_info.create({
     *   data: {
     *     // ... data to create a Patient_basic_info
     *   }
     * })
     * 
    **/
    create<T extends patient_basic_infoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, patient_basic_infoCreateArgs<ExtArgs>>
    ): Prisma__patient_basic_infoClient<$Result.GetResult<Prisma.$patient_basic_infoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Patient_basic_infos.
     *     @param {patient_basic_infoCreateManyArgs} args - Arguments to create many Patient_basic_infos.
     *     @example
     *     // Create many Patient_basic_infos
     *     const patient_basic_info = await prisma.patient_basic_info.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends patient_basic_infoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, patient_basic_infoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Patient_basic_info.
     * @param {patient_basic_infoDeleteArgs} args - Arguments to delete one Patient_basic_info.
     * @example
     * // Delete one Patient_basic_info
     * const Patient_basic_info = await prisma.patient_basic_info.delete({
     *   where: {
     *     // ... filter to delete one Patient_basic_info
     *   }
     * })
     * 
    **/
    delete<T extends patient_basic_infoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, patient_basic_infoDeleteArgs<ExtArgs>>
    ): Prisma__patient_basic_infoClient<$Result.GetResult<Prisma.$patient_basic_infoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Patient_basic_info.
     * @param {patient_basic_infoUpdateArgs} args - Arguments to update one Patient_basic_info.
     * @example
     * // Update one Patient_basic_info
     * const patient_basic_info = await prisma.patient_basic_info.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends patient_basic_infoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, patient_basic_infoUpdateArgs<ExtArgs>>
    ): Prisma__patient_basic_infoClient<$Result.GetResult<Prisma.$patient_basic_infoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Patient_basic_infos.
     * @param {patient_basic_infoDeleteManyArgs} args - Arguments to filter Patient_basic_infos to delete.
     * @example
     * // Delete a few Patient_basic_infos
     * const { count } = await prisma.patient_basic_info.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends patient_basic_infoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, patient_basic_infoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patient_basic_infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patient_basic_infoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patient_basic_infos
     * const patient_basic_info = await prisma.patient_basic_info.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends patient_basic_infoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, patient_basic_infoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Patient_basic_info.
     * @param {patient_basic_infoUpsertArgs} args - Arguments to update or create a Patient_basic_info.
     * @example
     * // Update or create a Patient_basic_info
     * const patient_basic_info = await prisma.patient_basic_info.upsert({
     *   create: {
     *     // ... data to create a Patient_basic_info
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient_basic_info we want to update
     *   }
     * })
    **/
    upsert<T extends patient_basic_infoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, patient_basic_infoUpsertArgs<ExtArgs>>
    ): Prisma__patient_basic_infoClient<$Result.GetResult<Prisma.$patient_basic_infoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Patient_basic_infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patient_basic_infoCountArgs} args - Arguments to filter Patient_basic_infos to count.
     * @example
     * // Count the number of Patient_basic_infos
     * const count = await prisma.patient_basic_info.count({
     *   where: {
     *     // ... the filter for the Patient_basic_infos we want to count
     *   }
     * })
    **/
    count<T extends patient_basic_infoCountArgs>(
      args?: Subset<T, patient_basic_infoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Patient_basic_infoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient_basic_info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Patient_basic_infoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Patient_basic_infoAggregateArgs>(args: Subset<T, Patient_basic_infoAggregateArgs>): Prisma.PrismaPromise<GetPatient_basic_infoAggregateType<T>>

    /**
     * Group by Patient_basic_info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patient_basic_infoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends patient_basic_infoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: patient_basic_infoGroupByArgs['orderBy'] }
        : { orderBy?: patient_basic_infoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, patient_basic_infoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatient_basic_infoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the patient_basic_info model
   */
  readonly fields: patient_basic_infoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for patient_basic_info.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__patient_basic_infoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the patient_basic_info model
   */ 
  interface patient_basic_infoFieldRefs {
    readonly id: FieldRef<"patient_basic_info", 'Int'>
    readonly name: FieldRef<"patient_basic_info", 'String'>
    readonly age: FieldRef<"patient_basic_info", 'Int'>
    readonly phone: FieldRef<"patient_basic_info", 'String'>
    readonly address: FieldRef<"patient_basic_info", 'String'>
    readonly occupation: FieldRef<"patient_basic_info", 'String'>
    readonly nid: FieldRef<"patient_basic_info", 'String'>
    readonly dob: FieldRef<"patient_basic_info", 'DateTime'>
    readonly gender: FieldRef<"patient_basic_info", 'String'>
  }
    

  // Custom InputTypes

  /**
   * patient_basic_info findUnique
   */
  export type patient_basic_infoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient_basic_info
     */
    select?: patient_basic_infoSelect<ExtArgs> | null
    /**
     * Filter, which patient_basic_info to fetch.
     */
    where: patient_basic_infoWhereUniqueInput
  }


  /**
   * patient_basic_info findUniqueOrThrow
   */
  export type patient_basic_infoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient_basic_info
     */
    select?: patient_basic_infoSelect<ExtArgs> | null
    /**
     * Filter, which patient_basic_info to fetch.
     */
    where: patient_basic_infoWhereUniqueInput
  }


  /**
   * patient_basic_info findFirst
   */
  export type patient_basic_infoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient_basic_info
     */
    select?: patient_basic_infoSelect<ExtArgs> | null
    /**
     * Filter, which patient_basic_info to fetch.
     */
    where?: patient_basic_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patient_basic_infos to fetch.
     */
    orderBy?: patient_basic_infoOrderByWithRelationInput | patient_basic_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for patient_basic_infos.
     */
    cursor?: patient_basic_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patient_basic_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patient_basic_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of patient_basic_infos.
     */
    distinct?: Patient_basic_infoScalarFieldEnum | Patient_basic_infoScalarFieldEnum[]
  }


  /**
   * patient_basic_info findFirstOrThrow
   */
  export type patient_basic_infoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient_basic_info
     */
    select?: patient_basic_infoSelect<ExtArgs> | null
    /**
     * Filter, which patient_basic_info to fetch.
     */
    where?: patient_basic_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patient_basic_infos to fetch.
     */
    orderBy?: patient_basic_infoOrderByWithRelationInput | patient_basic_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for patient_basic_infos.
     */
    cursor?: patient_basic_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patient_basic_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patient_basic_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of patient_basic_infos.
     */
    distinct?: Patient_basic_infoScalarFieldEnum | Patient_basic_infoScalarFieldEnum[]
  }


  /**
   * patient_basic_info findMany
   */
  export type patient_basic_infoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient_basic_info
     */
    select?: patient_basic_infoSelect<ExtArgs> | null
    /**
     * Filter, which patient_basic_infos to fetch.
     */
    where?: patient_basic_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patient_basic_infos to fetch.
     */
    orderBy?: patient_basic_infoOrderByWithRelationInput | patient_basic_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing patient_basic_infos.
     */
    cursor?: patient_basic_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patient_basic_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patient_basic_infos.
     */
    skip?: number
    distinct?: Patient_basic_infoScalarFieldEnum | Patient_basic_infoScalarFieldEnum[]
  }


  /**
   * patient_basic_info create
   */
  export type patient_basic_infoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient_basic_info
     */
    select?: patient_basic_infoSelect<ExtArgs> | null
    /**
     * The data needed to create a patient_basic_info.
     */
    data: XOR<patient_basic_infoCreateInput, patient_basic_infoUncheckedCreateInput>
  }


  /**
   * patient_basic_info createMany
   */
  export type patient_basic_infoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many patient_basic_infos.
     */
    data: patient_basic_infoCreateManyInput | patient_basic_infoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * patient_basic_info update
   */
  export type patient_basic_infoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient_basic_info
     */
    select?: patient_basic_infoSelect<ExtArgs> | null
    /**
     * The data needed to update a patient_basic_info.
     */
    data: XOR<patient_basic_infoUpdateInput, patient_basic_infoUncheckedUpdateInput>
    /**
     * Choose, which patient_basic_info to update.
     */
    where: patient_basic_infoWhereUniqueInput
  }


  /**
   * patient_basic_info updateMany
   */
  export type patient_basic_infoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update patient_basic_infos.
     */
    data: XOR<patient_basic_infoUpdateManyMutationInput, patient_basic_infoUncheckedUpdateManyInput>
    /**
     * Filter which patient_basic_infos to update
     */
    where?: patient_basic_infoWhereInput
  }


  /**
   * patient_basic_info upsert
   */
  export type patient_basic_infoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient_basic_info
     */
    select?: patient_basic_infoSelect<ExtArgs> | null
    /**
     * The filter to search for the patient_basic_info to update in case it exists.
     */
    where: patient_basic_infoWhereUniqueInput
    /**
     * In case the patient_basic_info found by the `where` argument doesn't exist, create a new patient_basic_info with this data.
     */
    create: XOR<patient_basic_infoCreateInput, patient_basic_infoUncheckedCreateInput>
    /**
     * In case the patient_basic_info was found with the provided `where` argument, update it with this data.
     */
    update: XOR<patient_basic_infoUpdateInput, patient_basic_infoUncheckedUpdateInput>
  }


  /**
   * patient_basic_info delete
   */
  export type patient_basic_infoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient_basic_info
     */
    select?: patient_basic_infoSelect<ExtArgs> | null
    /**
     * Filter which patient_basic_info to delete.
     */
    where: patient_basic_infoWhereUniqueInput
  }


  /**
   * patient_basic_info deleteMany
   */
  export type patient_basic_infoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which patient_basic_infos to delete
     */
    where?: patient_basic_infoWhereInput
  }


  /**
   * patient_basic_info without action
   */
  export type patient_basic_infoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient_basic_info
     */
    select?: patient_basic_infoSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const User_login_infoScalarFieldEnum: {
    username: 'username',
    hash_password: 'hash_password',
    user_role: 'user_role'
  };

  export type User_login_infoScalarFieldEnum = (typeof User_login_infoScalarFieldEnum)[keyof typeof User_login_infoScalarFieldEnum]


  export const Doctor_infoScalarFieldEnum: {
    username: 'username',
    name: 'name',
    specialization: 'specialization',
    degree: 'degree',
    phone: 'phone',
    email: 'email'
  };

  export type Doctor_infoScalarFieldEnum = (typeof Doctor_infoScalarFieldEnum)[keyof typeof Doctor_infoScalarFieldEnum]


  export const Receptionist_infoScalarFieldEnum: {
    username: 'username',
    name: 'name',
    phone: 'phone'
  };

  export type Receptionist_infoScalarFieldEnum = (typeof Receptionist_infoScalarFieldEnum)[keyof typeof Receptionist_infoScalarFieldEnum]


  export const Intern_infoScalarFieldEnum: {
    username: 'username',
    name: 'name',
    phone: 'phone'
  };

  export type Intern_infoScalarFieldEnum = (typeof Intern_infoScalarFieldEnum)[keyof typeof Intern_infoScalarFieldEnum]


  export const Patient_basic_infoScalarFieldEnum: {
    id: 'id',
    name: 'name',
    age: 'age',
    phone: 'phone',
    address: 'address',
    occupation: 'occupation',
    nid: 'nid',
    dob: 'dob',
    gender: 'gender'
  };

  export type Patient_basic_infoScalarFieldEnum = (typeof Patient_basic_infoScalarFieldEnum)[keyof typeof Patient_basic_infoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type user_login_infoWhereInput = {
    AND?: user_login_infoWhereInput | user_login_infoWhereInput[]
    OR?: user_login_infoWhereInput[]
    NOT?: user_login_infoWhereInput | user_login_infoWhereInput[]
    username?: StringFilter<"user_login_info"> | string
    hash_password?: StringFilter<"user_login_info"> | string
    user_role?: StringFilter<"user_login_info"> | string
  }

  export type user_login_infoOrderByWithRelationInput = {
    username?: SortOrder
    hash_password?: SortOrder
    user_role?: SortOrder
  }

  export type user_login_infoWhereUniqueInput = Prisma.AtLeast<{
    username?: string
    AND?: user_login_infoWhereInput | user_login_infoWhereInput[]
    OR?: user_login_infoWhereInput[]
    NOT?: user_login_infoWhereInput | user_login_infoWhereInput[]
    hash_password?: StringFilter<"user_login_info"> | string
    user_role?: StringFilter<"user_login_info"> | string
  }, "username">

  export type user_login_infoOrderByWithAggregationInput = {
    username?: SortOrder
    hash_password?: SortOrder
    user_role?: SortOrder
    _count?: user_login_infoCountOrderByAggregateInput
    _max?: user_login_infoMaxOrderByAggregateInput
    _min?: user_login_infoMinOrderByAggregateInput
  }

  export type user_login_infoScalarWhereWithAggregatesInput = {
    AND?: user_login_infoScalarWhereWithAggregatesInput | user_login_infoScalarWhereWithAggregatesInput[]
    OR?: user_login_infoScalarWhereWithAggregatesInput[]
    NOT?: user_login_infoScalarWhereWithAggregatesInput | user_login_infoScalarWhereWithAggregatesInput[]
    username?: StringWithAggregatesFilter<"user_login_info"> | string
    hash_password?: StringWithAggregatesFilter<"user_login_info"> | string
    user_role?: StringWithAggregatesFilter<"user_login_info"> | string
  }

  export type doctor_infoWhereInput = {
    AND?: doctor_infoWhereInput | doctor_infoWhereInput[]
    OR?: doctor_infoWhereInput[]
    NOT?: doctor_infoWhereInput | doctor_infoWhereInput[]
    username?: StringFilter<"doctor_info"> | string
    name?: StringFilter<"doctor_info"> | string
    specialization?: StringFilter<"doctor_info"> | string
    degree?: StringFilter<"doctor_info"> | string
    phone?: StringFilter<"doctor_info"> | string
    email?: StringFilter<"doctor_info"> | string
  }

  export type doctor_infoOrderByWithRelationInput = {
    username?: SortOrder
    name?: SortOrder
    specialization?: SortOrder
    degree?: SortOrder
    phone?: SortOrder
    email?: SortOrder
  }

  export type doctor_infoWhereUniqueInput = Prisma.AtLeast<{
    username?: string
    AND?: doctor_infoWhereInput | doctor_infoWhereInput[]
    OR?: doctor_infoWhereInput[]
    NOT?: doctor_infoWhereInput | doctor_infoWhereInput[]
    name?: StringFilter<"doctor_info"> | string
    specialization?: StringFilter<"doctor_info"> | string
    degree?: StringFilter<"doctor_info"> | string
    phone?: StringFilter<"doctor_info"> | string
    email?: StringFilter<"doctor_info"> | string
  }, "username">

  export type doctor_infoOrderByWithAggregationInput = {
    username?: SortOrder
    name?: SortOrder
    specialization?: SortOrder
    degree?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    _count?: doctor_infoCountOrderByAggregateInput
    _max?: doctor_infoMaxOrderByAggregateInput
    _min?: doctor_infoMinOrderByAggregateInput
  }

  export type doctor_infoScalarWhereWithAggregatesInput = {
    AND?: doctor_infoScalarWhereWithAggregatesInput | doctor_infoScalarWhereWithAggregatesInput[]
    OR?: doctor_infoScalarWhereWithAggregatesInput[]
    NOT?: doctor_infoScalarWhereWithAggregatesInput | doctor_infoScalarWhereWithAggregatesInput[]
    username?: StringWithAggregatesFilter<"doctor_info"> | string
    name?: StringWithAggregatesFilter<"doctor_info"> | string
    specialization?: StringWithAggregatesFilter<"doctor_info"> | string
    degree?: StringWithAggregatesFilter<"doctor_info"> | string
    phone?: StringWithAggregatesFilter<"doctor_info"> | string
    email?: StringWithAggregatesFilter<"doctor_info"> | string
  }

  export type receptionist_infoWhereInput = {
    AND?: receptionist_infoWhereInput | receptionist_infoWhereInput[]
    OR?: receptionist_infoWhereInput[]
    NOT?: receptionist_infoWhereInput | receptionist_infoWhereInput[]
    username?: StringFilter<"receptionist_info"> | string
    name?: StringFilter<"receptionist_info"> | string
    phone?: StringFilter<"receptionist_info"> | string
  }

  export type receptionist_infoOrderByWithRelationInput = {
    username?: SortOrder
    name?: SortOrder
    phone?: SortOrder
  }

  export type receptionist_infoWhereUniqueInput = Prisma.AtLeast<{
    username?: string
    AND?: receptionist_infoWhereInput | receptionist_infoWhereInput[]
    OR?: receptionist_infoWhereInput[]
    NOT?: receptionist_infoWhereInput | receptionist_infoWhereInput[]
    name?: StringFilter<"receptionist_info"> | string
    phone?: StringFilter<"receptionist_info"> | string
  }, "username">

  export type receptionist_infoOrderByWithAggregationInput = {
    username?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    _count?: receptionist_infoCountOrderByAggregateInput
    _max?: receptionist_infoMaxOrderByAggregateInput
    _min?: receptionist_infoMinOrderByAggregateInput
  }

  export type receptionist_infoScalarWhereWithAggregatesInput = {
    AND?: receptionist_infoScalarWhereWithAggregatesInput | receptionist_infoScalarWhereWithAggregatesInput[]
    OR?: receptionist_infoScalarWhereWithAggregatesInput[]
    NOT?: receptionist_infoScalarWhereWithAggregatesInput | receptionist_infoScalarWhereWithAggregatesInput[]
    username?: StringWithAggregatesFilter<"receptionist_info"> | string
    name?: StringWithAggregatesFilter<"receptionist_info"> | string
    phone?: StringWithAggregatesFilter<"receptionist_info"> | string
  }

  export type intern_infoWhereInput = {
    AND?: intern_infoWhereInput | intern_infoWhereInput[]
    OR?: intern_infoWhereInput[]
    NOT?: intern_infoWhereInput | intern_infoWhereInput[]
    username?: StringFilter<"intern_info"> | string
    name?: StringFilter<"intern_info"> | string
    phone?: StringFilter<"intern_info"> | string
  }

  export type intern_infoOrderByWithRelationInput = {
    username?: SortOrder
    name?: SortOrder
    phone?: SortOrder
  }

  export type intern_infoWhereUniqueInput = Prisma.AtLeast<{
    username?: string
    AND?: intern_infoWhereInput | intern_infoWhereInput[]
    OR?: intern_infoWhereInput[]
    NOT?: intern_infoWhereInput | intern_infoWhereInput[]
    name?: StringFilter<"intern_info"> | string
    phone?: StringFilter<"intern_info"> | string
  }, "username">

  export type intern_infoOrderByWithAggregationInput = {
    username?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    _count?: intern_infoCountOrderByAggregateInput
    _max?: intern_infoMaxOrderByAggregateInput
    _min?: intern_infoMinOrderByAggregateInput
  }

  export type intern_infoScalarWhereWithAggregatesInput = {
    AND?: intern_infoScalarWhereWithAggregatesInput | intern_infoScalarWhereWithAggregatesInput[]
    OR?: intern_infoScalarWhereWithAggregatesInput[]
    NOT?: intern_infoScalarWhereWithAggregatesInput | intern_infoScalarWhereWithAggregatesInput[]
    username?: StringWithAggregatesFilter<"intern_info"> | string
    name?: StringWithAggregatesFilter<"intern_info"> | string
    phone?: StringWithAggregatesFilter<"intern_info"> | string
  }

  export type patient_basic_infoWhereInput = {
    AND?: patient_basic_infoWhereInput | patient_basic_infoWhereInput[]
    OR?: patient_basic_infoWhereInput[]
    NOT?: patient_basic_infoWhereInput | patient_basic_infoWhereInput[]
    id?: IntFilter<"patient_basic_info"> | number
    name?: StringFilter<"patient_basic_info"> | string
    age?: IntFilter<"patient_basic_info"> | number
    phone?: StringFilter<"patient_basic_info"> | string
    address?: StringFilter<"patient_basic_info"> | string
    occupation?: StringFilter<"patient_basic_info"> | string
    nid?: StringNullableFilter<"patient_basic_info"> | string | null
    dob?: DateTimeFilter<"patient_basic_info"> | Date | string
    gender?: StringFilter<"patient_basic_info"> | string
  }

  export type patient_basic_infoOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    occupation?: SortOrder
    nid?: SortOrderInput | SortOrder
    dob?: SortOrder
    gender?: SortOrder
  }

  export type patient_basic_infoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: patient_basic_infoWhereInput | patient_basic_infoWhereInput[]
    OR?: patient_basic_infoWhereInput[]
    NOT?: patient_basic_infoWhereInput | patient_basic_infoWhereInput[]
    name?: StringFilter<"patient_basic_info"> | string
    age?: IntFilter<"patient_basic_info"> | number
    phone?: StringFilter<"patient_basic_info"> | string
    address?: StringFilter<"patient_basic_info"> | string
    occupation?: StringFilter<"patient_basic_info"> | string
    nid?: StringNullableFilter<"patient_basic_info"> | string | null
    dob?: DateTimeFilter<"patient_basic_info"> | Date | string
    gender?: StringFilter<"patient_basic_info"> | string
  }, "id">

  export type patient_basic_infoOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    occupation?: SortOrder
    nid?: SortOrderInput | SortOrder
    dob?: SortOrder
    gender?: SortOrder
    _count?: patient_basic_infoCountOrderByAggregateInput
    _avg?: patient_basic_infoAvgOrderByAggregateInput
    _max?: patient_basic_infoMaxOrderByAggregateInput
    _min?: patient_basic_infoMinOrderByAggregateInput
    _sum?: patient_basic_infoSumOrderByAggregateInput
  }

  export type patient_basic_infoScalarWhereWithAggregatesInput = {
    AND?: patient_basic_infoScalarWhereWithAggregatesInput | patient_basic_infoScalarWhereWithAggregatesInput[]
    OR?: patient_basic_infoScalarWhereWithAggregatesInput[]
    NOT?: patient_basic_infoScalarWhereWithAggregatesInput | patient_basic_infoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"patient_basic_info"> | number
    name?: StringWithAggregatesFilter<"patient_basic_info"> | string
    age?: IntWithAggregatesFilter<"patient_basic_info"> | number
    phone?: StringWithAggregatesFilter<"patient_basic_info"> | string
    address?: StringWithAggregatesFilter<"patient_basic_info"> | string
    occupation?: StringWithAggregatesFilter<"patient_basic_info"> | string
    nid?: StringNullableWithAggregatesFilter<"patient_basic_info"> | string | null
    dob?: DateTimeWithAggregatesFilter<"patient_basic_info"> | Date | string
    gender?: StringWithAggregatesFilter<"patient_basic_info"> | string
  }

  export type user_login_infoCreateInput = {
    username: string
    hash_password: string
    user_role: string
  }

  export type user_login_infoUncheckedCreateInput = {
    username: string
    hash_password: string
    user_role: string
  }

  export type user_login_infoUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    hash_password?: StringFieldUpdateOperationsInput | string
    user_role?: StringFieldUpdateOperationsInput | string
  }

  export type user_login_infoUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    hash_password?: StringFieldUpdateOperationsInput | string
    user_role?: StringFieldUpdateOperationsInput | string
  }

  export type user_login_infoCreateManyInput = {
    username: string
    hash_password: string
    user_role: string
  }

  export type user_login_infoUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    hash_password?: StringFieldUpdateOperationsInput | string
    user_role?: StringFieldUpdateOperationsInput | string
  }

  export type user_login_infoUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    hash_password?: StringFieldUpdateOperationsInput | string
    user_role?: StringFieldUpdateOperationsInput | string
  }

  export type doctor_infoCreateInput = {
    username: string
    name: string
    specialization: string
    degree: string
    phone: string
    email: string
  }

  export type doctor_infoUncheckedCreateInput = {
    username: string
    name: string
    specialization: string
    degree: string
    phone: string
    email: string
  }

  export type doctor_infoUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type doctor_infoUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type doctor_infoCreateManyInput = {
    username: string
    name: string
    specialization: string
    degree: string
    phone: string
    email: string
  }

  export type doctor_infoUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type doctor_infoUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    degree?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type receptionist_infoCreateInput = {
    username: string
    name: string
    phone: string
  }

  export type receptionist_infoUncheckedCreateInput = {
    username: string
    name: string
    phone: string
  }

  export type receptionist_infoUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type receptionist_infoUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type receptionist_infoCreateManyInput = {
    username: string
    name: string
    phone: string
  }

  export type receptionist_infoUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type receptionist_infoUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type intern_infoCreateInput = {
    username: string
    name: string
    phone: string
  }

  export type intern_infoUncheckedCreateInput = {
    username: string
    name: string
    phone: string
  }

  export type intern_infoUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type intern_infoUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type intern_infoCreateManyInput = {
    username: string
    name: string
    phone: string
  }

  export type intern_infoUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type intern_infoUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type patient_basic_infoCreateInput = {
    name: string
    age: number
    phone: string
    address: string
    occupation: string
    nid?: string | null
    dob: Date | string
    gender: string
  }

  export type patient_basic_infoUncheckedCreateInput = {
    id?: number
    name: string
    age: number
    phone: string
    address: string
    occupation: string
    nid?: string | null
    dob: Date | string
    gender: string
  }

  export type patient_basic_infoUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    occupation?: StringFieldUpdateOperationsInput | string
    nid?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type patient_basic_infoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    occupation?: StringFieldUpdateOperationsInput | string
    nid?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type patient_basic_infoCreateManyInput = {
    id?: number
    name: string
    age: number
    phone: string
    address: string
    occupation: string
    nid?: string | null
    dob: Date | string
    gender: string
  }

  export type patient_basic_infoUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    occupation?: StringFieldUpdateOperationsInput | string
    nid?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type patient_basic_infoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    occupation?: StringFieldUpdateOperationsInput | string
    nid?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type user_login_infoCountOrderByAggregateInput = {
    username?: SortOrder
    hash_password?: SortOrder
    user_role?: SortOrder
  }

  export type user_login_infoMaxOrderByAggregateInput = {
    username?: SortOrder
    hash_password?: SortOrder
    user_role?: SortOrder
  }

  export type user_login_infoMinOrderByAggregateInput = {
    username?: SortOrder
    hash_password?: SortOrder
    user_role?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type doctor_infoCountOrderByAggregateInput = {
    username?: SortOrder
    name?: SortOrder
    specialization?: SortOrder
    degree?: SortOrder
    phone?: SortOrder
    email?: SortOrder
  }

  export type doctor_infoMaxOrderByAggregateInput = {
    username?: SortOrder
    name?: SortOrder
    specialization?: SortOrder
    degree?: SortOrder
    phone?: SortOrder
    email?: SortOrder
  }

  export type doctor_infoMinOrderByAggregateInput = {
    username?: SortOrder
    name?: SortOrder
    specialization?: SortOrder
    degree?: SortOrder
    phone?: SortOrder
    email?: SortOrder
  }

  export type receptionist_infoCountOrderByAggregateInput = {
    username?: SortOrder
    name?: SortOrder
    phone?: SortOrder
  }

  export type receptionist_infoMaxOrderByAggregateInput = {
    username?: SortOrder
    name?: SortOrder
    phone?: SortOrder
  }

  export type receptionist_infoMinOrderByAggregateInput = {
    username?: SortOrder
    name?: SortOrder
    phone?: SortOrder
  }

  export type intern_infoCountOrderByAggregateInput = {
    username?: SortOrder
    name?: SortOrder
    phone?: SortOrder
  }

  export type intern_infoMaxOrderByAggregateInput = {
    username?: SortOrder
    name?: SortOrder
    phone?: SortOrder
  }

  export type intern_infoMinOrderByAggregateInput = {
    username?: SortOrder
    name?: SortOrder
    phone?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type patient_basic_infoCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    occupation?: SortOrder
    nid?: SortOrder
    dob?: SortOrder
    gender?: SortOrder
  }

  export type patient_basic_infoAvgOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
  }

  export type patient_basic_infoMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    occupation?: SortOrder
    nid?: SortOrder
    dob?: SortOrder
    gender?: SortOrder
  }

  export type patient_basic_infoMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    occupation?: SortOrder
    nid?: SortOrder
    dob?: SortOrder
    gender?: SortOrder
  }

  export type patient_basic_infoSumOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use user_login_infoDefaultArgs instead
     */
    export type user_login_infoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = user_login_infoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use doctor_infoDefaultArgs instead
     */
    export type doctor_infoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = doctor_infoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use receptionist_infoDefaultArgs instead
     */
    export type receptionist_infoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = receptionist_infoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use intern_infoDefaultArgs instead
     */
    export type intern_infoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = intern_infoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use patient_basic_infoDefaultArgs instead
     */
    export type patient_basic_infoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = patient_basic_infoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}